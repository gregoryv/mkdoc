package main

import (
	"bytes"
	"fmt"
	"io"

	"github.com/gregoryv/stp"
)

func run(stderr, stdout io.Writer, stdin io.Reader) {
	w := &bytes.Buffer{}
	r := &bytes.Buffer{}
	io.Copy(r, stdin)
	next := func(step func()) {
		step()
		r, w = w, r
	}

	// first pass; include files
	next(func() { stp.Cat(stderr, w, r) })

	// parse links early
	var links map[string]string
	next(func() { links = stp.ParseLinks(w, r) })

	var requirements []string
	next(func() { requirements = stp.ParseRequirements(w, r) })

	// requirements must be indexed (#R...)
	next(func() { stp.CheckRequirements(stderr, w, r) }) // #R8
	next(func() { stp.SentenceSpace(stderr, w, r) })
	next(func() { stp.EmptyLines(stderr, w, r) })
	next(func() { stp.ListRequirements(w, r, requirements) })

	// lines starting with `[\d+] ...`
	next(func() { stp.AnchorReferences(w, r) })
	next(func() { stp.DropHTMLComments(w, r) })
	next(func() { stp.RFCIndent(w, r) })

	// second pass; parse toc and index sections
	var toc bytes.Buffer
	cols := 69
	next(func() { stp.ParseTOC(stderr, w, &toc, r, cols) })
	next(func() { stp.LinkSections(stderr, w, r) })

	// insert toc
	next(func() { stp.InsertTOC(w, r, &toc) })

	// before replacing ordinary links
	next(func() { stp.ReplaceRequirements(stderr, w, r) })

	// replace links, also includes reference links
	next(func() { stp.ReplaceLinks(stderr, w, r, links) })
	next(func() { stp.ReplaceSections(stderr, w, r) })

	fmt.Fprintln(stdout, htmlHeader)
	io.Copy(stdout, r)
	fmt.Fprintln(stdout, htmlFooter)
}

const htmlHeader = `<!DOCTYPE html>

<meta charset="utf-8">
<pre>`

const htmlFooter = `</pre>
<!-- GENERATED by github.com/gregoryv/main. DO NOT EDIT! -->`
